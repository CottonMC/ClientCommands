plugins {
    id 'fabric-loom' version '0.2.0-SNAPSHOT'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '4.9.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "client-commands"
group = "io.github.cottonmc"
version = "0.1.0+19w02a-SNAPSHOT"

minecraft {
}

dependencies {
    minecraft "com.mojang:minecraft:19w02a"
    mappings "net.fabricmc:yarn:19w02a.13"
    modCompile "net.fabricmc:fabric-loader:0.3.2.92"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modCompile "net.fabricmc:fabric:0.1.4.71"
}

// TODO: Why doesn't this work??
apply from: "https://raw.githubusercontent.com/Juuxel/gradle-local-properties/master/loader.gradle.kts"

if (rootProject.file("private.gradle").exists()) {
    apply from: "private.gradle"
}

artifactory {
    contextUrl = "http://server.bbkr.space:8081/artifactory/"
    publish {
        repository {
            /*if (project.version.toString().contains("SNAPSHOT")) {
                repoKey = "libs-snapshot-local"
            } else {
                repoKey = "libs-release-local"
            }*/
            repoKey = "libs-snapshot-local"

            username = cottonArtifactoryUser == null ? System.getProperty("artifactoryUser") : cottonArtifactoryUser
            password = cottonArtifactoryPassword == null ? System.getProperty("artifactoryPassword") : cottonArtifactoryPassword
        }
        defaults {
            publications("maven")
            publishArtifacts = true
            publishPom = true
        }
    }
}

// Everything below was copied from cotton-resources

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifactId = "client-commands"

            pom.withXml {
                def pomFile = asNode()
                def depsNode = pomFile.get("dependencies");
                pomFile.remove(depsNode);

                def newDeps = pomFile.appendNode("dependencies");
                configurations.modCompile.getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def artifactNode = newDeps.appendNode("dependency")
                    artifactNode.appendNode('groupId', it.moduleGroup)
                    artifactNode.appendNode('artifactId', it.moduleName)
                    artifactNode.appendNode('version', it.moduleVersion)
                }
            }
            artifacts = [
                    artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${version}.jar") { //release jar - file location not provided anywhere in loom
                        classifier null
                        builtBy remapJar
                    },
                    artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${version}-dev.jar") { //release jar - file location not provided anywhere in loom
                        classifier "dev"
                        builtBy remapJar
                    },
                    artifact (sourcesJar)
            ]
        }
    }
}

task sourcesJar(type: Jar) {
    baseName = archivesBaseName
    classifier = "sources"
    from sourceSets.main.allSource
    from sourceSets.main.resources
}
